#!/usr/bin/env perl
use v5.14;
use File::Basename qw(basename);
use HTML::ExtractContent;
use HTML::WikiConverter;
use HTML::WikiConverter::Markdown;
use Mojo::UserAgent;
use JSON;
use Encode;
use URI;
use URI::Escape qw(uri_escape);

my $program_name = basename($0);

my $url = shift @ARGV or die <<USAGE;

Pass URLs from argv:

   $program_name URL

USAGE

sub extract_as_markdown {
    state $co = HTML::WikiConverter->new( dialect => "Markdown" );
    state $ex = HTML::ExtractContent->new;

    my $text = $ex->extract($_[0])->as_html;

    $text =~ s{<br(\s*/)>}{\n}g;

    return $text;
}

sub extract_locally {
    my $url = shift;
    my $ua = Mojo::UserAgent->new;
    my $tx = $ua->get($url);

    my $base_url = URI->new($url);

    my $charset;
    say $tx->res->headers->content_type;

    my $dom = $tx->res->dom;
    my ($charset) = $dom->find("head meta[http-equiv=Content-Type]")->first->{content} =~ m{charset=([^\s;]+)};

    $dom->find("a, img")->each(
        sub {
            if ($_->type eq "a") {
                $_->attrs(href => "".URI->new_abs( $_->attrs("href"), $base_url ) );
            }
            else {
                $_->attrs(src  => "".URI->new_abs( $_->attrs("src"),  $base_url ) );
            }
        }
    );

    my $html = $tx->res->body;
    if ($charset !~ m/^utf-?8$/i) {
        $html = Encode::decode($charset, $html);
    }

    return extract_as_markdown($html)
}

sub extract_with_g0vre {
    my $url = shift;
    my $uri_g0v = URI->new("http://g0vre.herokuapp.com/read");
    $uri_g0v->query_form("url", $url);


    my $ua = Mojo::UserAgent->new;
    my $tx = $ua->get("$uri_g0v");

    my $body = $tx->res->body;
    my $res = JSON::decode_json($body);
    return $res->{text};
}

# binmode STDOUT, ":encoding(utf8)";
# say extract_with_g0vre($url);

extract_locally($url);

