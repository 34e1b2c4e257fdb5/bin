#!/usr/bin/env perl
use v5.14;
use utf8;
binmode STDIN, ":utf8";
binmode STDOUT, ":utf8";

my @urls;
@urls = @ARGV if @ARGV;

if ($urls[0] eq '-') {
    local $/ = undef;
    @urls = split /\n/, <STDIN>;
}

utf8::decode($_) for(@urls);

die <<USAGE unless @urls;

Pass URLs from argv:

   $0 URL URL...

Or pass URLs from STDIN:

   cat one-url-per-line.txt | $0 -

USAGE

use FindBin;
use lib "$FindBin::Bin/lib";
use Brain;
use Ceis::Extractor;

my $brain = Brain->new;
my $rel_origin  = $brain->relation("original_of");
my $rel_appear  = $brain->relation("appear_in");
my $rel_precede = $brain->relation("precede");
my $rel_follow  = $brain->relation("follow");

for my $url (@urls) {
    my $extractor = Ceis::Extractor->new(url => $url);

    my $k_url = $brain->remember($url);

    my @sentences = $extractor->sentences;

    my $fulltext = join "\n", @sentences;
    my $k_fulltext = $brain->blob->add($fulltext);
    $rel_origin->add($k_fulltext, $k_url);

    my $pre_x;
    for my $x ($extractor->sentences) {
        my $k = $brain->remember($x);

        $rel_origin->add($k, $k_url);
        $rel_appear->add($k, $k_fulltext);

        if ($pre_x) {
            $rel_precede->add($k, $pre_x);
            $rel_follow->add($pre_x, $k);
        }
        $pre_x = $k;
    }

    say "Read: URL:$k_url Fulltext:$k_fulltext";
}
