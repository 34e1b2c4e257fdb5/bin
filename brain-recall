#!/usr/bin/env perl
use v5.14;
use FindBin;
use lib "$FindBin::Bin/lib";
use utf8;
use Encode;
use List::MoreUtils qw(natatime);
use Term::ANSIColor;
use Brain;

binmode STDOUT, ":utf8";

my $brain = Brain->new;

sub properties {
    my ($k) = @_;
    my $prop = $brain->relations($k);
    $prop->{digest} = $k;
    return $prop;
}

sub render_properties {
    my ($prop) = @_;

    for my $k (qw(digest origin)) {
        if (ref($prop->{$k}) eq 'ARRAY') {
            for my $v (@{ $prop->{$k} }) {
                say colored($k, "yellow") . " $v";
            }
        }
        else {
            say colored($k, "yellow") . " " . $prop->{$k};
        }
    }
}

my @units = map { Encode::decode_utf8($_) } @ARGV or die "Need something";

my $result = {};

for my $k ($brain->recall(@units, { operator => 'AND'})) {
    my $prop = properties($k);
    for(@{ $prop->{origin} }) {
        push @{ $result->{$_} }, $prop;
    }
}

for (sort { @{ $result->{$b} } <=> @{ $result->{$a} } } keys %$result) {
    say colored("origin", "yellow") . " " . $_;

    for(@{$result->{$_}}){
        delete $_->{origin};
        say "    " . colored("digest", "yellow") . " " . $_->{digest};

        say "\n    " . $brain->blob->get($_->{digest}) . "\n";
    }
}
